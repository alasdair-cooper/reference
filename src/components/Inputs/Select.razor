@inherits DefaultComponentBase

@typeparam T

@attribute [CascadingTypeParameter(nameof(T))]

@if (Label is not null)
{
    <label for="@Id">
        @Label
    </label>
}

<select
    id="@Id"
    style="@Style"
    class="@Class"
    @attributes="AdditionalAttributes"
    @bind="_selectedIndex"
    @bind:after="OnSelectedIndexChanged">
    <button>
        <selectedcontent></selectedcontent>
    </button>
    @foreach (var (index, option) in _options.Index())
    {
        <option
            id="@option.Id"
            style="@option.Style"
            class="@option.Class"
            @attributes="AdditionalAttributes"
            value="@index">
            @option.ChildContent
        </option>
    }
</select>

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {

    private int? _selectedIndex;
    private readonly HashSet<Option<T>> _options = [];

    private new string Id { get => base.Id ?? field; } = $"select-{Guid.NewGuid()}";

    [Parameter]
    public T Value { get; set; } = default!;

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public void RegisterOption(Option<T> option)
    {
        if (!_options.Add(option)) return;

        if (option.Value?.Equals(Value) is true || (option.Value is null && Value is null))
        {
            _selectedIndex = _options.Count - 1;
        }

        StateHasChanged();
    }

    private async Task OnSelectedIndexChanged()
    {
        if (_selectedIndex is not null)
        {
            var option = _options.ElementAtOrDefault(_selectedIndex.Value);
            await ValueChanged.InvokeAsync(option is not null ? option.Value : default);
        }
        else
        {
            await ValueChanged.InvokeAsync(default);
        }
    }

}