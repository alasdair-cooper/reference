@typeparam T
@typeparam TState

@attribute [CascadingTypeParameter(nameof(T))]
@attribute [CascadingTypeParameter(nameof(TState))]

<table>
    <thead>
        <tr>
            @foreach (var (_, column) in _columns.OrderBy(x => x.ordinal))
            {
                <th>@column.Title</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var (index, item) in _data.Index().Select(x => (x.Index + (Page -1 ) * PageSize, x.Item)))
        {
            <tr>
                @foreach (var (_, column) in _columns.OrderBy(x => x.ordinal))
                {
                    <td>
                        @switch (column)
                        {
                            case { CellContent: { } cellContent }:
                                @cellContent(new CellContext<T>(item, index))
                                break;
                            case { Property: { } property }:
                                @property(item)
                                break;
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<TableFooter
    TotalCount="_totalCount"
    Page="Page"
    PageChanged="OnPageChangedAsync"
    PageSize="PageSize"
    PageSizeChanged="OnPageSizeChangedAsync" />

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>

@code {

    private List<T> _data = [];
    private int _totalCount;
    private readonly HashSet<(int ordinal, Column<T, TState> column)> _columns = [];

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public required Func<TState, Task<(IEnumerable<T> data, int totalCount)>> DataProvider { get; set; }

    [Parameter]
    public int Page { get; set; }

    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public EventCallback<int> PageSizeChanged { get; set; }
    
    [Parameter]
    [EditorRequired]
    public required TState State
    {
        get;
        set
        {
            field = value;
            _ = LoadDataAsync();
        }
    }

    public async Task OnPageChangedAsync(int page)
    {
        Page = page;
        await PageChanged.InvokeAsync(page);
        await LoadDataAsync();
    }
    
    public async Task OnPageSizeChangedAsync(int pageSize)
    {
        PageSize = pageSize;
        await PageSizeChanged.InvokeAsync(pageSize);
        await LoadDataAsync();
    }

    public void RegisterColumn(Column<T, TState> column)
    {
        if (_columns.Add((column.Ordinal ?? 0, column)))
        {
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync() => await LoadDataAsync();

    private async Task LoadDataAsync()
    {
        var (data, totalCount) = await DataProvider(State);
        _data = data.ToList();
        _totalCount = totalCount;
    }

}