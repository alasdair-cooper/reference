@using System.Diagnostics
@using AlasdairCooper.Reference.BlazorPlayground.Utilities
@using AlasdairCooper.Reference.Components.Tables
@using AlasdairCooper.Reference.Components.Inputs

@page "/table"

<Select
    @bind-Value:get="(_sortDirection, _sortBy)"
    @bind-Value:set="x => (_sortDirection, _sortBy) = x"
    Label="Sort by">
    @foreach (var value in Enum.GetValues<UserSortableField>().Select(IEnumerable<(SortDirection dir, UserSortableField field)> (x) => [(SortDirection.Ascending, x), (SortDirection.Descending, x)]).SelectMany(x => x))
    {
        <Option Value="@value">
            <span>
                @value.field
            </span>
            <div style="flex: 1 1"></div>
            <span>
                @ToDisplayString(ToSortType(value.field), value.dir)
            </span>
        </Option>
    }
</Select>

<Table
    DataProvider="FetchDataAsync"
    State="(_page, _pageSize, _sortDirection, _sortBy)"
    @bind-Page="_page"
    @bind-PageSize="_pageSize">
    <IndexColumn />
    <Column
        Title="First Name"
        Property="x => x.FirstName" />
    <Column
        Title="Last Name"
        Property="x => x.LastName" />
    <Column
        Title="Age"
        Property="x => x.Age" />
    <Column
        Title="Gender"
        Property="x => x.Gender" />
    <Column
        Title="Email"
        Property="x => x.Email" />
</Table>

@code {

    private int _page = 1;
    private int _pageSize = 10;
    private SortDirection _sortDirection = SortDirection.Ascending;
    private UserSortableField _sortBy = UserSortableField.FirstName;

    private static Task<(IEnumerable<User>, int)> FetchDataAsync((int page, int pageSize, SortDirection sortDirection, UserSortableField sortBy) state)
    {
        var users =
            UserGenerator.Users.Take(500)
                .OrderByDirection(
                    state.sortDirection,
                    state.sortBy switch
                    {
                        UserSortableField.FirstName => x => x.FirstName,
                        UserSortableField.LastName => x => x.LastName,
                        UserSortableField.Age => x => x.Age,
                        UserSortableField.Email => x => x.Email,
                        _ => throw new ArgumentOutOfRangeException()
                    })
                .ToList();

        return Task.FromResult((users.Skip((state.page - 1) * state.pageSize).Take(state.pageSize), users.Count));
    }

    public enum UserSortableField
    {
        FirstName,
        LastName,
        Age,
        Email,
    }

    private static SortType ToSortType(UserSortableField field) =>
        field switch
        {
            UserSortableField.FirstName or UserSortableField.LastName => SortType.Alphabetical,
            UserSortableField.Age => SortType.Numerical,
            UserSortableField.Email => SortType.Other,
            _ => throw new UnreachableException()
        };

    public enum SortType
    {
        Other,
        Alphabetical,
        Numerical,
    }

    private static string ToDisplayString(SortType sortType, SortDirection sortDirection) =>
        (sortType, sortDirection) switch
        {
            (SortType.Alphabetical, SortDirection.Ascending) => "A-Z",
            (SortType.Alphabetical, SortDirection.Descending) => "Z-A",
            (SortType.Numerical, SortDirection.Ascending) => "Low to High",
            (SortType.Numerical, SortDirection.Descending) => "High to Low",
            (SortType.Other, SortDirection.Ascending) => "Ascending",
            (SortType.Other, SortDirection.Descending) => "Descending",
            _ => throw new UnreachableException()
        };

}